Q1. What is the main advantage of using plt.show() when displaying Matplotlib plots?

a) It avoids the need for additional customization.

b) It generates static image files for reports.

c) It is ideal for batch processing scripts.

d) It allows for interactivity and real-time updates.

Correct answer: d)

Q2. When might you choose No show() and use plt.savefig() to display Matplotlib plots?

a) When you need to generate static images for reports or presentations.

b) When you want to avoid creating any plots.

c) When working in an interactive environment like Jupyter Notebook.

d) When you want to explore data and make real-time adjustments.

Correct answer: a)

Q3. What is the primary advantage of using data visualization in the context of data analysis?

a) It provides a visual representation of data to uncover patterns and insights.

b) It replaces the need for written reports and explanations.

c) It makes data analysis more complex and time-consuming.

d) It allows for the exploration of datasets and the identification of patterns.

Correct answer: a)

Code:
import matplotlib.pyplot as plt

fig, axs = plt.subplots(2, 2)  # Create a 2x2 grid of subplots

x=[1,2,3,4]
y=[5,6,7,8]
plt.plot(x, y, color='blue', linestyle='--', marker='o', label='Data')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')
plt.title('Customized Plot')
plt.legend()

plt.savefig('plot.png', dpi=300, bbox_inches='tight')

z = [1,2,3,4]
plt.scatter(x, y, c=z, cmap='viridis')

plt.annotate('This point is interesting!', xy=(2, 6))

x=[1,2,3,4]
y=[5,6,7,8]
# Create and customize your plot
plt.plot(x, y)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Interactive Plot')

# Display the plot interactively
plt.show()

plt.plot(x, y)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Static Plot')

# Save the plot as an image (e.g., PNG)
plt.savefig('static_plot.png', dpi=300, bbox_inches='tight')
